#%Modules

set the_magick "the-magick/3.0"
set the_repo "/software/pkg"

set is_selfish 1
set the_debug 0

# nb, module paths may be arbitrarily deep
set the_name [module-info name]
set the_length [expr [string length $the_name] + 2]
set me_first [string range $ModulesCurrentModulefile 0 [expr [string length $ModulesCurrentModulefile] - $the_length]]
set the_rest [split [lindex [array get env MODULEPATH] 1] ':']

if {$the_debug} {
  puts stderr "## the_repo: $the_repo"
  puts stderr "## the_magick: $the_magick"
  puts stderr "## the_name: $the_name"
  puts stderr "## ModulesCurrentModulefile: $ModulesCurrentModulefile"
  puts stderr "## me_first: $me_first"
  puts stderr "## the_rest: $the_rest"
}

# remove me_first from the_rest
set the_lindex [lsearch $the_rest $me_first]
if {$the_lindex != -1} {
  set the_rest [lreplace $the_rest $the_lindex $the_lindex]
}

# test me_first, then the_rest for the_magick
set need_magick 1
if {$the_debug} { puts stderr "\n## looking for $the_magick"}
foreach foo [concat [list $me_first] $the_rest] {
  if {$need_magick} {
    if {$the_debug} { puts stderr "## -> checking $foo"}
    if {[file exist $foo/$the_magick]} {
      if {$the_debug} {puts stderr "## -> found $foo/$the_magick"}
      source $foo/$the_magick
      set need_magick 0
    }
  }
}

if {$need_magick} {
  puts stderr "ERROR: could not find $the_magick"
  exit
}

# strip the version number from the_name
set the_bare_module_name [string range $the_name 0 [expr [string last "/" $the_name]-1]]
if {$the_debug} { puts stderr $the_bare_module_name }

# selfish modules conflict with other versions of themselves
if {$is_selfish} {
  conflict $the_bare_module_name
}

# nb, 'set the_root /path/to/foo' to override heuristics
set the_root "NULL"
if {[string equal $the_root "NULL"]} {
  set the_root [the-magick::determine_root]
}
if {$the_debug} { puts stderr "\n## set the_root: $the_root\n" }

# load any required modules
# eg, the-magick::load_prequisites {"numpy"}

# nb, PATH, LD_LIBRARY_PATH, MANPATH, etc
#the-magick::parse_me

# software-specific bits
# eg, setenv MATLAB_HOME $the_root

if [ module-info mode load ] {

	set shellt [ module-info shelltype ]
	set bashfile "$the_root/SetUpFreeSurfer.sh"
	set tcshfile "$the_root/SetUpFreeSurfer.csh"

	if { [string compare $shellt "sh"] == 0 } {

		puts "export FREESURFER_HOME=$the_root && source $bashfile"

	} else {

		puts "setenv FREESURFER_HOME $the_root && source $tcshfile"

	}

}


# vim:ts=2
